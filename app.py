import plotly.express as px
import scipy.stats
import streamlit as st

from utils.data_utils import join_tables


MAIN_IMAGE_LINK = """
https://img.freepik.com/premium-vector/bank-building-and-money-bank-
financing-money-exchange-financial-services-atm-giving-out-money_625536-194.jpg
"""

DATA = st.cache_data(join_tables)(dropna=True)
DATA_PLOT = st.cache_data(join_tables)(dropna=True, drop_outliers=True)

ID_COLUMNS = ["ID_CLIENT", "AGREEMENT_RK"]
CATEGORICAL_COLUMNS = DATA.select_dtypes(exclude="number").columns.tolist()
NUMERIC_COLUMNS = DATA.columns.difference(CATEGORICAL_COLUMNS + ID_COLUMNS).tolist()
FEATURE_COLUMNS = DATA.columns.difference(ID_COLUMNS).tolist()

CORRELATION_FN = {
    "–ö–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç –ü–∏—Ä—Å–æ–Ω–∞": scipy.stats.pearsonr,
    "–ö–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç –°–ø–∏—Ä–º–µ–Ω–∞": scipy.stats.spearmanr,
    "–ö–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç –ö–µ–Ω–¥–∞–ª–ª–∞": scipy.stats.kendalltau,
}

DASHBOARD_DESCRIPTION = """\
    ‚ÑπÔ∏è –í –¥–∞–Ω–Ω–æ–º –¥–∞—à–±–æ—Ä–¥–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Ä–∞–∑–≤–µ–¥–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –±–∞–Ω–∫–∞.
"""

FEATURE_DESCRIPTION = {
    "ID_CLIENT": "–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏",
    "AGE": "–≤–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞",
    "GENDER": "–ø–æ–ª –∫–ª–∏–µ–Ω—Ç–∞ (1 ‚Äî –º—É–∂—á–∏–Ω–∞, 0 ‚Äî –∂–µ–Ω—â–∏–Ω–∞)",
    "EDUCATION": "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    "MARITAL_STATUS": "—Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ",
    "CHILD_TOTAL": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–∞",
    "DEPENDANTS": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∂–¥–∏–≤–µ–Ω—Ü–µ–≤ –∫–ª–∏–µ–Ω—Ç–∞",
    "SOCSTATUS_WORK_FL": "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç—ã (1 ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç, 0 ‚Äî –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)",
    "SOCSTATUS_PENS_FL": "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ–Ω—Å–∏–∏ (1 ‚Äî –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä, 0 ‚Äî –Ω–µ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä)",
    "SOCSTATUS_WORK_DESC": "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç—ã",
    "SOCSTATUS_PENS_DESC": "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ–Ω—Å–∏–∏",
    "REG_ADDRESS_PROVINCE": "–æ–±–ª–∞—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞",
    "FACT_ADDRESS_PROVINCE": "–æ–±–ª–∞—Å—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞",
    "POSTAL_ADDRESS_PROVINCE": "–ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –æ–±–ª–∞—Å—Ç–∏",
    "FL_PRESENCE_FL": "—Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã",
    "OWN_AUTO": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏",
    "GEN_INDUSTRY": "–æ—Ç—Ä–∞—Å–ª—å —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞",
    "GEN_TITLE": "–¥–æ–ª–∂–Ω–æ—Å—Ç—å",
    "JOB_DIR": "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–∞–Ω–∏–∏",
    "WORK_TIME": "–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–µ (–≤ –º–µ—Å—è—Ü–∞—Ö)",
    "FAMILY_INCOME": "—Å–µ–º–µ–π–Ω—ã–π –¥–æ—Ö–æ–¥ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π)",
    "CREDIT": "—Å—É–º–º–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö)",
    "TERM": "—Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞",
    "FST_PAYMENT": "–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å (–≤ —Ä—É–±–ª—è—Ö)",
    "PERSONAL_INCOME": "–ª–∏—á–Ω—ã–π –¥–æ—Ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö)",
    "LOAN_NUM_TOTAL": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—É–¥ –∫–ª–∏–µ–Ω—Ç–∞",
    "LOAN_NUM_CLOSED": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≥–∞—à–µ–Ω–Ω—ã—Ö —Å—Å—É–¥ –∫–ª–∏–µ–Ω—Ç–∞",
    "AGREEMENT_RK": "—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞ –≤ –≤—ã–±–æ—Ä–∫–µ",
    "TARGET": "—Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: —Ñ–ª–∞–≥ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é",
}


def _get_str_description(feature_dict: dict = FEATURE_DESCRIPTION):
    return "\n".join(map(lambda x: f"* **{x[0]}** ‚Äî {x[1]}", feature_dict.items()))


def show_data_description():
    st.subheader("üëÄ –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –¥–∞–Ω–Ω—ã–µ")
    if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–≤—ã–±–æ—Ä–∫—É"):
        st.dataframe(DATA.sample(5), hide_index=True)
    else:
        st.dataframe(DATA.sample(5), hide_index=True)
    
    if st.checkbox("üîé –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", value=False):
        st.info(_get_str_description())


def show_distribution_section():
    st.info("–í –¥–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ üíπ")

    st.sidebar.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
    if st.sidebar.checkbox("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", value=True):
        st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        numeric_feature = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫", NUMERIC_COLUMNS
        )
        st.info(f"{numeric_feature} ‚Äî {FEATURE_DESCRIPTION[numeric_feature]}")

        if st.checkbox("üéØ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Ç–∞—Ä–≥–µ—Ç–∞ –¥–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞", value=False):
            extra_params = {"color": "TARGET"}
        else:
            extra_params = {}

        fig = px.histogram(
            DATA_PLOT,
            x=numeric_feature,
            histnorm="probability",
            title=f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏–∑–Ω–∞–∫–∞ {numeric_feature}",
            marginal="violin",
            **extra_params,
        )
        st.plotly_chart(fig)

    if st.sidebar.checkbox("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", value=True):
        st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        cat_feature = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫", CATEGORICAL_COLUMNS
        )
        st.info(f"{cat_feature} ‚Äî {FEATURE_DESCRIPTION[cat_feature]}")

        if st.checkbox("üéØ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Ç–∞—Ä–≥–µ—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞", value=False):
            extra_params = {"color": "TARGET", "barmode": "group"}
        else:
            extra_params = {}

        fig = px.histogram(
            DATA_PLOT,
            x=cat_feature,
            histnorm="probability",
            title=f"–†–∞—Å–ø–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏–∑–Ω–∞–∫–∞ {cat_feature}",
            **extra_params,
        )
        st.plotly_chart(fig)


    if st.sidebar.checkbox("üë¨ –ü–æ–ø–∞—Ä–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", value=True):
        st.subheader("üë¨ –ü–æ–ø–∞—Ä–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        choice_1, choice_2 = st.columns(2)
        with choice_1:
            first_feat = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–∏–∑–Ω–∞–∫", FEATURE_COLUMNS)
        with choice_2:
            second_feat = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –ø—Ä–∏–∑–Ω–∞–∫", set(FEATURE_COLUMNS) - set([first_feat]))

        st.info(
            f"{first_feat} ‚Äî {FEATURE_DESCRIPTION[first_feat]}\n\n{second_feat} ‚Äî {FEATURE_DESCRIPTION[second_feat]}"
        )

        if st.checkbox("üéØ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Ç–∞—Ä–≥–µ—Ç–∞ –¥–ª—è scatter –≥—Ä–∞—Ñ–∏–∫–∞", value=False):
            extra_params = {"color": "TARGET"}
        else:
            extra_params = {}

        fig = px.scatter(
            DATA_PLOT,
            x=first_feat,
            y=second_feat,
            title=f"Scatterplot {first_feat} | {second_feat}",
            **extra_params,
        )
        st.plotly_chart(fig)

def show_correlation_section():
    st.info("–í –¥–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–µ–∂–¥—É —Å–æ–±–æ–π ‚ûï‚ûñ")

    st.sidebar.subheader("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è")
    if st.sidebar.checkbox("üî¢ –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π", value=True):
        st.subheader("üî¢ –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")

        correlation_matrix = DATA[NUMERIC_COLUMNS + ["TARGET"]].corr().round(2)

        colormap = [
            [0.0, "red"],
            [0.5, "white"],
            [1.0, "green"],
        ]

        fig = px.imshow(
            correlation_matrix,
            title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ —Ç–∞—Ä–≥–µ—Ç–∞",
            text_auto=True,
            color_continuous_scale=colormap,
            zmin=-1,
            zmax=1,
        )

        st.plotly_chart(fig)

    if st.sidebar.checkbox("üîó –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏", value=True):
        st.subheader("üîó –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")

        choice_1, choice_2 = st.columns(2)
        CORR_FEATURES = NUMERIC_COLUMNS + ["TARGET"]
        with choice_1:
            first_feat = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–∏–∑–Ω–∞–∫", CORR_FEATURES)
        with choice_2:
            second_feat = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –ø—Ä–∏–∑–Ω–∞–∫", CORR_FEATURES)

        if first_feat == second_feat:
            st.info(f"{first_feat} ‚Äî {FEATURE_DESCRIPTION[first_feat]}")
        else:
            st.info(
                f"{first_feat} ‚Äî {FEATURE_DESCRIPTION[first_feat]}\n\n{second_feat} ‚Äî {FEATURE_DESCRIPTION[second_feat]}"
            )

        correlations = {}
        for corr_coef in CORRELATION_FN:
            coef_ = CORRELATION_FN[corr_coef](
                DATA[first_feat],
                DATA[second_feat]
            ).statistic
            correlations[corr_coef] = round(coef_, 3)

        output_str = "\n".join(map(lambda x: f"* **{x[0]}:** {x[1]}", correlations.items()))
        st.success(output_str)

def show_statistics_section():
    st.info("–í –¥–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ üì±")

    st.sidebar.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    if st.sidebar.checkbox("7Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", value=True):
        st.subheader("7Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

        if st.checkbox("üéØ –†–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ —Ç–∞—Ä–≥–µ—Ç—É", value=False):
            st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞:**")
            st.dataframe(DATA.loc[DATA.TARGET == 1, NUMERIC_COLUMNS].describe())

            st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞:**")
            st.dataframe(DATA.loc[DATA.TARGET == 0, NUMERIC_COLUMNS].describe())
        else:
            st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:**")
            st.dataframe(DATA[NUMERIC_COLUMNS].describe())

    if st.sidebar.checkbox("üìö –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", value=True):
        st.subheader("üìö –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

        if st.checkbox("üéØ –†–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ —Ç–∞—Ä–≥–µ—Ç—É", value=False):
            st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞:**")
            st.dataframe(DATA.loc[DATA.TARGET == 1, CATEGORICAL_COLUMNS].describe())

            st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞:**")
            st.dataframe(DATA.loc[DATA.TARGET == 0, CATEGORICAL_COLUMNS].describe())
        else:
            st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:**")
            st.dataframe(DATA[CATEGORICAL_COLUMNS].describe())

    if st.sidebar.checkbox("üêº –ö–≤–∞–Ω—Ç–∏–ª–∏ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", value=True):
        st.subheader("üêº –ö–≤–∞–Ω—Ç–∏–ª–∏ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

        feature = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞–Ω—Ç–∏–ª—è", NUMERIC_COLUMNS)
        st.info(f"{feature} ‚Äî {FEATURE_DESCRIPTION[feature]}")

        q = st.slider(label="–ö–≤–∞–Ω—Ç–∏–ª—å", min_value=0., max_value=1., step=0.001)
        q_value = DATA[feature].quantile(q)
        st.success(f"–ö–≤–∞–Ω—Ç–∏–ª—å {q} –¥–ª—è {feature}: {q_value}")



def show_main_page():
    st.title("üí∞ –†–∞–∑–≤–µ–¥–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞–Ω–∫–∞")
    st.image(MAIN_IMAGE_LINK.strip())
    st.info(DASHBOARD_DESCRIPTION)

    st.sidebar.title("EDA –¥–ª—è –±–∞–Ω–∫–∞")
    st.sidebar.info(
        """
        **–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:**
        - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
        - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        """
    )

    show_data_description()

    section_distr, section_corr, section_stats = st.tabs(["–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"])

    with section_distr:
        show_distribution_section()

    with section_corr:
        show_correlation_section()

    with section_stats:
        show_statistics_section()



    



if __name__ == "__main__":
    show_main_page()